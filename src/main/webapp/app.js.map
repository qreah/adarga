{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/numeral/numeral.js","src/scripts/app.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","global","factory","this","numeral","_","decimal","binary","unformatRegex","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","trillion","neg","Math","includes","indexOf","RegExp","abbreviations","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","Object","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","define","amd","Item","lastYear","json","ly","keyFR","hasOwnProperty","$","document","ready","click","getElementById","style","visibility","bodyOM","removeChild","bodyIM","bodyFM","bodyCM","bodyGM","company","log","get","data","fr","JSON","parse","OM","itemNameOM","itemNumbersOM","revenue","salesGrowth","COGS","operatingIncome","grossMargin","SGA","SGAOverSales","NOPAT","NOPATGrowth","NOPATMargin","taxRate","netIncome","incomeOverRevenue","operatingCashFlowOverIncome","body","createElement","setAttribute","appendChild","lastyear","innerHTML","j","th","createTextNode","td","tr","convertido","itemPaint","toLocaleString","undefined","minimumFractionDigits","thi","tdi","id","itemNameIM","itemNumbersIM","IM","accountsReceivableGrowth","inventoryGrowth","accountsReceivableOverSales","inventorySales","daysReceivables","daysInventory","daysPayables","salesOverWorkingCapital","salesOverNetLTAssets","salesOverNetAssets","cashOverNetAssets","cashOverReceivables","cashAndMarketableSecurities","itemNameFM","itemNumbersFM","FM","debtToCapitalRatio","netDebtToNetCapitalRatio","spread","netFinancialLeverage","financialLeverage","currentRatio","quickRatio","cashRatio","interestCoverage_operatingIncomeVSinterestexpense","interestCoverage_operatingCashFlowVSinterestexpense","equity","itemNameCM","itemNumbersCM","CM","ChangeOperatingCashFlow","ChangeInvestingCashFlow","changeInCAPEX","changeInAdquisitions","changeInSecurities","changeInInvesting","FCF","changeInFCF","changeInDividends","changeInStockRepurchase","changeInDebtRepayment","operatingCashFlow","itemNameGM","itemNumbersGM","GM","operatingROA","salesOverAssets","financialLeverageGain","ROE","returnOnTangibleEquity","payOut","dividendYield","FCFOverEquity","FCFPerShare","earningsPerShare","operatingIncomePerShare","growthRate","salesGrowthRate","beginningNetOperatingWCOverSales","beginningNetOperatingLTAssetsOverSales","beginningNetDebt2CapitalRatio","afterTaxCostOfDebt"],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","\n\nclass FinancialResults {\n\n\tCM: CashManagement;\n\tFM: FinancialManagement;\n\tGM: GlobalManagement;\n\tIM: InvestmentManagement;\n\tOM: OperatingManagement;\n}\n\nclass CashManagement {\n\toperatingCashFlow: Item;\n\tChangeOperatingCashFlow: Item;\n\tinvestingCashFlow: Item;\n\tChangeInvestingCashFlow: Item;\n\tCAPEX: Item;\n\tchangeInCAPEX: Item;\n\tadquisitions: Item;\n\tchangeInAdquisitions: Item;\n\tsecuritiesNet: Item;\n\tchangeInSecurities: Item;\n\tfinancingCashFlow: Item;\n\tinvesting: Item; \n\tchangeInInvesting: Item;\n\tFCF: Item;\n\tchangeInFCF: Item;\n\tdividends: Item;\n\tchangeInDividends: Item;\n\tstockRepurchase: Item;\n\tchangeInStockRepurchase: Item;\n\tdebtRepayment: Item;\n\tchangeInDebtRepayment: Item;\n\n}\n\nclass FinancialManagement {\n\tnetInterestEarningsAfterTaxes: Item;\n\tlongTermDebt: Item;\n\tnetDebt: Item;\n\tequity: Item;\n\tdebtToCapitalRatio: Item;\n\tnetDebtToNetCapitalRatio: Item;\n\tspread: Item;\n\tnetFinancialLeverage: Item;\n\tfinancialLeverage: Item;\n\tcurrentRatio: Item;\n\tquickRatio: Item;\n\tcashRatio: Item;\n\tinterestCoverage_operatingIncomeVSinterestexpense: Item;\n\tinterestCoverage_operatingCashFlowVSinterestexpense: Item;\n\t\n}\n\nclass GlobalManagement {\n\toperatingROA: Item;\n\tsalesOverAssets: Item;\n\t\n\tfinancialLeverageGain: Item;\n\tROE: Item;\n\treturnOnTangibleEquity: Item;\n\tpayOut: Item;\n\tdividendYield: Item;\n\tFCFOverEquity: Item;\n\tFCFPerShare: Item;\n\tearningsPerShare: Item;\n\toperatingIncomePerShare: Item;\n\tgrowthRate: Item;\n\t\n\tsalesGrowthRate: Item;\n\tNOPATMargin: Item;\n\tbeginningNetOperatingWCOverSales: Item;\n\tbeginningNetOperatingLTAssetsOverSales: Item;\n\tbeginningNetDebt2CapitalRatio: Item;\n\tafterTaxCostOfDebt: Item;\n}\n\nclass InvestmentManagement {\n\tLTAssets: Item;\n\taccountsPayable: Item;\n\taccountsPayableSales: Item;\n\taccountsReceivable: Item;\n\taccountsReceivableGrowth: Item;\n\taccountsReceivableOverSales: Item;\n\tcashAndMarketableSecurities: Item;\n\tcashOverNetAssets: Item;\n\tcashOverReceivables: Item;\n\tcurrentAssets: Item;\n\tcurrentLiabilities: Item;\n\tdaysInventory: Item;\n\tdaysPayables: Item;\n\tdaysReceivables: Item;\n\tgoodwillAndIntangibles: Item;\n\tinventory: Item;\n\tinventoryGrowth: Item;\n\tinventorySales: Item;\n\tlongTermDebt: Item;\n\tnetAssets: Item;\n\tnetLTAssets: Item;\n\tnetWorkingCapital: Item;\n\tnonInterestBearingLTLiabilities: Item;\n\tsalesOverNetAssets: Item;\n\tsalesOverNetLTAssets: Item;\n\tsalesOverWorkingCapital: Item;\n\tshortTermDebtAndCurrentPortionOfLongTermDebt: Item;\n}\n\nclass OperatingManagement {\n\trevenue: Item;\n\tsalesGrowth: Item;\n\tCOGS: Item;\n\toperatingIncome: Item;\n\tgrossMargin: Item;\n\tSGA: Item;\n\tSGAOverSales: Item;\n\tNOPAT: Item;\n\tNOPATGrowth: Item;\n\tNOPATMargin: Item;\n\toperatingMargin: Item;\n\tprovisionForIncomeTaxes: Item;\n\ttaxRate: Item; \n\tinterestExpense: Item;\n\tnetIncome: Item;\n\tincomeOverRevenue: Item;\n\toperatingCashFlow: Item;\n\toperatingCashFlowOverIncome: Item;\n\n\n}\n\n\nclass Item {\n\tconstructor(item: ItemElements){\n\t\tthis.item = item;\n\t}\n\n\titem: ItemElements;\n\t\n\n\tlength() {\n\t\t\n\t\treturn 5;\n\t}\n\n\t\n\n}\n\nclass ItemElements {\n\titem1: number; \n\titem2: number; \n\titem3: number; \n\titem4: number; \n\titem5: number; \n\n\t\n}\n\nfunction lastYear(json: Item) {\n\tvar ly;\n\t\tfor (var keyFR in json) {\n\t\t  if (json.hasOwnProperty(keyFR)) {\n\t\t  \tly = keyFR;\n\t\t  }\n\t\t}\n\t\treturn ly;\n}\n\n\n//import * as numeral from '../../node_modules/numeral/numeral';\n\n\n\n$(document).ready(function(){\n\t\n  $(\"#analizar\").click(function(){\n\n\n  \t/***********************\n\t\n\t\t\tConstruct the HTML code needed\n\n    \t*/\n\n  \tvar OM = document.getElementById(\"OM\");\n  \tOM.style.visibility = \"visible\";\n\n  \tvar bodyOM = document.getElementById(\"tbodyOM\");\n  \tvar tableOM = document.getElementById(\"tableOM\");\n  \ttableOM.removeChild(bodyOM);\n\n\n  \tvar IM = document.getElementById(\"IM\");\n  \tIM.style.visibility = \"visible\";\n\n  \tvar bodyIM = document.getElementById(\"tbodyIM\");\n  \tvar tableIM = document.getElementById(\"tableIM\");\n  \ttableIM.removeChild(bodyIM);\n  \t\n  \tvar FM = document.getElementById(\"FM\");\n  \tFM.style.visibility = \"visible\";\n\n  \tvar bodyFM = document.getElementById(\"tbodyFM\");\n  \tvar tableFM = document.getElementById(\"tableFM\");\n  \ttableFM.removeChild(bodyFM);\n\n  \tvar CM = document.getElementById(\"CM\");\n  \tCM.style.visibility = \"visible\";\n\n  \tvar bodyCM = document.getElementById(\"tbodyCM\");\n  \tvar tableCM = document.getElementById(\"tableCM\");\n  \ttableCM.removeChild(bodyCM);\n\n  \tvar GM = document.getElementById(\"GM\");\n  \tGM.style.visibility = \"visible\";\n\n  \tvar bodyGM = document.getElementById(\"tbodyGM\");\n  \tvar tableGM = document.getElementById(\"tableGM\");\n  \ttableGM.removeChild(bodyGM);\n\n\n\n\n  \tvar company = (<HTMLInputElement>document.getElementById(\"company\")).value;\n  \tconsole.log(company);\n\n    $.get(\"https://api.adarga.org/analysis?com=\" + company, function(data){\n    \t\n    \tlet fr: FinancialResults = JSON.parse(data);\n    \tconsole.log(fr.OM);\n    \t\n    \t//require('typescript-require');\n\t\tvar numeral = require('../../node_modules/numeral/numeral');\n\n\n    \t\n    \t/***********************\n\t\n\t\t\tOperating Management\n\n    \t*/\n\n\t    var itemNameOM = [\"Revenue\",\n\t    \t\t\"Sales Growth\",\n\t    \t\t\"COGs\",\n\t    \t\t\"Operating Income\",\n\t    \t\t\"Gross Margin\",\n\t    \t\t\"SGA\",\n\t    \t\t\"SGA Growth\",\n\t    \t\t\"NOPAT\",\n\t    \t\t\"NOPAT Growth\",\n\t    \t\t\"NOPAT Margin\",\n\t    \t\t\"Tax Rate\",\n\t    \t\t\"Net Income\",\n\t    \t\t\"Income Over Revenue\",\n\t    \t\t\"Operating Cash Flow Over Income\"\n\n\t    \t];\n\n\t    var itemNumbersOM = [fr.OM.revenue,\n\t    \t\tfr.OM.salesGrowth,\n\t    \t\tfr.OM.COGS,\n\t    \t\tfr.OM.operatingIncome,\n\t    \t\tfr.OM.grossMargin,\n\t    \t\tfr.OM.SGA,\n\t    \t\tfr.OM.SGAOverSales,\n\t    \t\tfr.OM.NOPAT,\n\t    \t\tfr.OM.NOPATGrowth,\n\t    \t\tfr.OM.NOPATMargin,\n\t    \t\tfr.OM.taxRate,\n\t    \t\tfr.OM.netIncome,\n\t    \t\tfr.OM.incomeOverRevenue,\n\t    \t\tfr.OM.operatingCashFlowOverIncome\n\t    \t];\n\n\t    var body = document.createElement(\"tbody\");\n\t    body.setAttribute(\"id\", \"tbodyOM\");\n\t    document.getElementById(\"tableOM\").appendChild(body);\n\t    var lastyear = lastYear(fr.OM.revenue);\n\t\tconsole.log(lastyear);\n\t\tvar col_1OM = document.getElementById(\"col_1OM\");\n\t\tcol_1OM.innerHTML = String(lastyear);\n\t\tvar col_2OM = document.getElementById(\"col_2OM\");\n\t\tcol_2OM.innerHTML = String(lastyear -1);\n\t\tvar col_3OM = document.getElementById(\"col_3OM\");\n\t\tcol_3OM.innerHTML = String(lastyear -2);\n\t\tvar col_4OM = document.getElementById(\"col_4OM\");\n\t\tcol_4OM.innerHTML = String(lastyear -3);\n\t\tvar col_5OM = document.getElementById(\"col_5OM\");\n\t\tcol_5OM.innerHTML = String(lastyear -4);\n\n\n\t    for (var j=0; j<itemNumbersOM.length; j++) {\n\t    \t\n\t    \tvar th = document.createElement(\"th\").appendChild(document.createTextNode(itemNameOM[j])); \n\t\t    var td = document.createElement(\"td\");\n\t\t    var tr = document.createElement(\"tr\");\n\t\t    td.appendChild(th);\n\t\t    tr.appendChild(td);\n\n\t\t    \n\t\t    \n\n\t\t    for (var i=0; i<5;i++) {\n\t\t    \tvar convertido;\n\t\t  \t\tvar itemPaint = itemNumbersOM[j][lastyear - i];\n\t\t  \t\tif ((typeof itemPaint) == 'number') {\n\t\t\t    \tconvertido = itemPaint.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});\n\t\t\t    } else {\n\t\t\t    \tconvertido = numeral(Number(itemPaint)).format('0,0');\n\t\t\t    }\n\n\t\t\t    \n\n\t\t    \tvar thi = document.createElement(\"th\").appendChild(document.createTextNode(convertido));\n\t\t    \tvar tdi = document.createElement(\"td\");\n\t\t    \ttdi.id = itemNameOM[j] + i;\n\t\t    \ttdi.appendChild(thi);\n\t\t\t\ttr.appendChild(tdi);\n\t\t\t\t\n\t\t    }\n\t\t    document.getElementById(\"tbodyOM\").appendChild(tr);\n\t    }\n\n\n\n\n\n\t    /***********************\n\t\n\t\t\tInvestment Management\n\n    \t*/\n\n\t    var itemNameIM = [\"Accounts Receivable Growth\",\n\t    \t\t\"Inventory Growth\",\n\t    \t\t\"Accounts Receivable Over Sales\",\n\t    \t\t\"Inventory Over Sales\",\n\t    \t\t\"Days Receivables\",\n\t    \t\t\"Days Inventory\",\n\t    \t\t\"Days Payables\",\n\t    \t\t\"Sales Over Working Capital\",\n\t    \t\t\"Sales Over Net LTAssets\",\n\t    \t\t\"Sales Over Net Assets\",\n\t    \t\t\"Cash Over NetAssets\",\n\t    \t\t\"Cash Over Receivables\",\n\t    \t];\n\n\t    var itemNumbersIM = [fr.IM.accountsReceivableGrowth,\n\t    \t\tfr.IM.inventoryGrowth,\n\t    \t\tfr.IM.accountsReceivableOverSales,\n\t    \t\tfr.IM.inventorySales,\n\t    \t\tfr.IM.daysReceivables,\n\t    \t\tfr.IM.daysInventory,\n\t    \t\tfr.IM.daysPayables,\n\t    \t\tfr.IM.salesOverWorkingCapital,\n\t    \t\tfr.IM.salesOverNetLTAssets,\n\t    \t\tfr.IM.salesOverNetAssets,\n\t    \t\tfr.IM.cashOverNetAssets,\n\t    \t\tfr.IM.cashOverReceivables,\n\t    \t];\n\n\t    var bodyIM = document.createElement(\"tbody\");\n\t    bodyIM.setAttribute(\"id\", \"tbodyIM\");\n\t    document.getElementById(\"tableIM\").appendChild(bodyIM);\n\t    var lastyear = lastYear(fr.IM.cashAndMarketableSecurities);\n\t\t\n\t\tvar col_1IM = document.getElementById(\"col_1IM\");\n\t\tcol_1IM.innerHTML = String(lastyear);\n\t\tvar col_2IM = document.getElementById(\"col_2IM\");\n\t\tcol_2IM.innerHTML = String(lastyear -1);\n\t\tvar col_3IM = document.getElementById(\"col_3IM\");\n\t\tcol_3IM.innerHTML = String(lastyear -2);\n\t\tvar col_4IM = document.getElementById(\"col_4IM\");\n\t\tcol_4IM.innerHTML = String(lastyear -3);\n\t\tvar col_5IM = document.getElementById(\"col_5IM\");\n\t\tcol_5IM.innerHTML = String(lastyear -4);\n\n\n\t    for (var j=0; j<itemNumbersIM.length; j++) {\n\t    \t\n\t    \tvar th = document.createElement(\"th\").appendChild(document.createTextNode(itemNameIM[j])); \n\t\t    var td = document.createElement(\"td\");\n\t\t    var tr = document.createElement(\"tr\");\n\t\t    td.appendChild(th);\n\t\t    tr.appendChild(td);\n\n\t\t    \n\t\t    \n\n\t\t    for (var i=0; i<5;i++) {\n\t\t    \tvar convertido;\n\t\t  \t\tvar itemPaint = itemNumbersIM[j][lastyear - i];\n\t\t  \t\tif ((typeof itemPaint) == 'number') {\n\t\t\t    \tconvertido = itemPaint.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});\n\t\t\t    } else {\n\t\t\t    \tconvertido = numeral(Number(itemPaint)).format('0,0');\n\t\t\t    }\n\n\t\t\t    \n\n\t\t    \tvar thi = document.createElement(\"th\").appendChild(document.createTextNode(convertido));\n\t\t    \tvar tdi = document.createElement(\"td\");\n\t\t    \ttdi.id = itemNameIM[j] + i;\n\t\t    \ttdi.appendChild(thi);\n\t\t\t\ttr.appendChild(tdi);\n\t\t\t\t\n\t\t    }\n\t\t    document.getElementById(\"tbodyIM\").appendChild(tr);\n\t    }\n\n\n\n\t    /***********************\n\t\n\t\t\tFinancial Management\n\n    \t*/\n\n\t    var itemNameFM = [\"Debt To Capital Ratio\",\n\t    \t\t\"Net Debt To Net Capital Ratio\",\n\t    \t\t\"Spread\",\n\t    \t\t\"Net Financial Leverage\",\n\t    \t\t\"Financial Leverage\",\n\t    \t\t\"Current Ratio\",\n\t    \t\t\"Quick Ratio\",\n\t    \t\t\"Cash Ratio\",\n\t    \t\t\"Operating Income vs Interest Expense\",\n\t    \t\t\"Operating Cash Flow vs Interest expense\",\n\t    \t];\n\n\t    var itemNumbersFM = [fr.FM.debtToCapitalRatio,\n\t    \t\tfr.FM.netDebtToNetCapitalRatio,\n\t    \t\tfr.FM.spread,\n\t    \t\tfr.FM.netFinancialLeverage,\n\t    \t\tfr.FM.financialLeverage,\n\t    \t\tfr.FM.currentRatio,\n\t    \t\tfr.FM.quickRatio,\n\t    \t\tfr.FM.cashRatio,\n\t    \t\tfr.FM.interestCoverage_operatingIncomeVSinterestexpense,\n\t    \t\tfr.FM.interestCoverage_operatingCashFlowVSinterestexpense,\n\t    \t\t\n\t    \t];\n\n\t    var bodyFM = document.createElement(\"tbody\");\n\t    bodyFM.setAttribute(\"id\", \"tbodyFM\");\n\t    document.getElementById(\"tableFM\").appendChild(bodyFM);\n\t    var lastyear = lastYear(fr.FM.equity);\n\t\t\n\t\tvar col_1FM = document.getElementById(\"col_1FM\");\n\t\tcol_1FM.innerHTML = String(lastyear);\n\t\tvar col_2FM = document.getElementById(\"col_2FM\");\n\t\tcol_2FM.innerHTML = String(lastyear -1);\n\t\tvar col_3FM = document.getElementById(\"col_3FM\");\n\t\tcol_3FM.innerHTML = String(lastyear -2);\n\t\tvar col_4FM = document.getElementById(\"col_4FM\");\n\t\tcol_4FM.innerHTML = String(lastyear -3);\n\t\tvar col_5FM = document.getElementById(\"col_5FM\");\n\t\tcol_5FM.innerHTML = String(lastyear -4);\n\n\n\t    for (var j=0; j<itemNumbersFM.length; j++) {\n\t    \t\n\t    \tvar th = document.createElement(\"th\").appendChild(document.createTextNode(itemNameFM[j])); \n\t\t    var td = document.createElement(\"td\");\n\t\t    var tr = document.createElement(\"tr\");\n\t\t    td.appendChild(th);\n\t\t    tr.appendChild(td);\n\n\t\t    \n\t\t    \n\n\t\t    for (var i=0; i<5;i++) {\n\t\t    \tvar convertido;\n\t\t  \t\tvar itemPaint = itemNumbersFM[j][lastyear - i];\n\t\t  \t\tif ((typeof itemPaint) == 'number') {\n\t\t\t    \tconvertido = itemPaint.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});\n\t\t\t    } else {\n\t\t\t    \tconvertido = numeral(Number(itemPaint)).format('0,0');\n\t\t\t    }\n\n\t\t\t    \n\n\t\t    \tvar thi = document.createElement(\"th\").appendChild(document.createTextNode(convertido));\n\t\t    \tvar tdi = document.createElement(\"td\");\n\t\t    \ttdi.id = itemNameFM[j] + i;\n\t\t    \ttdi.appendChild(thi);\n\t\t\t\ttr.appendChild(tdi);\n\t\t\t\t\n\t\t    }\n\t\t    document.getElementById(\"tbodyFM\").appendChild(tr);\n\t    }\n\t    \n\t    \n\n\t     /***********************\n\t\n\t\t\tCash Management\n\n    \t*/\n\n\t    var itemNameCM = [\"Change Operating Cash Flow\",\n\t    \t\t\"Change Investing Cash Flow\",\n\t    \t\t\"Change In CAPEX\",\n\t    \t\t\"Change In Adquisitions\",\n\t    \t\t\"Change In Securities\",\n\t    \t\t\"Change In Investing (CAPEX + Adquisitions)\",\n\t    \t\t\"FCF\",\n\t    \t\t\"Change In FCF\",\n\t    \t\t\"Change In Dividends\",\n\t    \t\t\"Change In Stock Repurchase\",\n\t    \t\t\"changeInDebtRepayment\",\n\t    \t];\n\n\t    var itemNumbersCM = [fr.CM.ChangeOperatingCashFlow,\n\t    \t\tfr.CM.ChangeInvestingCashFlow,\n\t    \t\tfr.CM.changeInCAPEX,\n\t    \t\tfr.CM.changeInAdquisitions,\n\t    \t\tfr.CM.changeInSecurities,\n\t    \t\tfr.CM.changeInInvesting,\n\t    \t\tfr.CM.FCF,\n\t    \t\tfr.CM.changeInFCF,\n\t    \t\tfr.CM.changeInDividends,\n\t    \t\tfr.CM.changeInStockRepurchase,\n\t    \t\tfr.CM.changeInDebtRepayment,\n\t    \t];\n\n\t    var bodyCM = document.createElement(\"tbody\");\n\t    bodyCM.setAttribute(\"id\", \"tbodyCM\");\n\t    document.getElementById(\"tableCM\").appendChild(bodyCM);\n\t    var lastyear = lastYear(fr.CM.operatingCashFlow);\n\t\t\n\t\tvar col_1CM = document.getElementById(\"col_1CM\");\n\t\tcol_1CM.innerHTML = String(lastyear);\n\t\tvar col_2CM = document.getElementById(\"col_2CM\");\n\t\tcol_2CM.innerHTML = String(lastyear -1);\n\t\tvar col_3CM = document.getElementById(\"col_3CM\");\n\t\tcol_3CM.innerHTML = String(lastyear -2);\n\t\tvar col_4CM = document.getElementById(\"col_4CM\");\n\t\tcol_4CM.innerHTML = String(lastyear -3);\n\t\tvar col_5CM = document.getElementById(\"col_5CM\");\n\t\tcol_5CM.innerHTML = String(lastyear -4);\n\n\n\t    for (var j=0; j<itemNumbersCM.length; j++) {\n\t    \t\n\t    \tvar th = document.createElement(\"th\").appendChild(document.createTextNode(itemNameCM[j])); \n\t\t    var td = document.createElement(\"td\");\n\t\t    var tr = document.createElement(\"tr\");\n\t\t    td.appendChild(th);\n\t\t    tr.appendChild(td);\n\n\t\t    \n\t\t    \n\n\t\t    for (var i=0; i<5;i++) {\n\t\t    \tvar convertido;\n\t\t  \t\tvar itemPaint = itemNumbersCM[j][lastyear - i];\n\t\t  \t\tif ((typeof itemPaint) == 'number') {\n\t\t\t    \tconvertido = itemPaint.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});\n\t\t\t    } else {\n\t\t\t    \tconvertido = numeral(Number(itemPaint)).format('0,0');\n\t\t\t    }\n\n\t\t\t    \n\n\t\t    \tvar thi = document.createElement(\"th\").appendChild(document.createTextNode(convertido));\n\t\t    \tvar tdi = document.createElement(\"td\");\n\t\t    \ttdi.id = itemNameCM[j] + i;\n\t\t    \ttdi.appendChild(thi);\n\t\t\t\ttr.appendChild(tdi);\n\t\t\t\t\n\t\t    }\n\t\t    document.getElementById(\"tbodyCM\").appendChild(tr);\n\t    }\n\n\n\t    /***********************\n\t\n\t\t\tGlobal Management\n\n    \t*/\n\n\t    var itemNameGM = [\"Operating ROA\",\n\t    \t\t\"Sales Over Assets\",\n\t    \t\t\"Financial Leverage Gain\",\n\t    \t\t\"ROE\",\n\t    \t\t\"Return On Tangible Equity\",\n\t    \t\t\"Pay Out\",\n\t    \t\t\"Dividend Yield\",\n\t    \t\t\"FCF Over Equity\",\n\t    \t\t\"FCF Per Share\",\n\t    \t\t\"Earnings Per Share\",\n\t    \t\t\"Operating Income Per Share\",\n\t    \t\t\"Growth Rate\",\n\t    \t\t\"Sales Growth Rate\",\n\t    \t\t\"NOPAT Margin\",\n\t    \t\t\"Beginning Net Operating WC Over Sales\",\n\t    \t\t\"Beginning Net Operating LT Assets Over Sales\",\n\t    \t\t\"Beginning Net Debt 2 Capital Ratio\",\n\t    \t\t\"After TaxCost Of Debt\",\n\t    \t];\n\n\t    var itemNumbersGM = [fr.GM.operatingROA,\n\t    \t\tfr.GM.salesOverAssets,\n\t    \t\tfr.GM.financialLeverageGain,\n\t    \t\tfr.GM.ROE,\n\t    \t\tfr.GM.returnOnTangibleEquity,\n\t    \t\tfr.GM.payOut,\n\t    \t\tfr.GM.dividendYield,\n\t    \t\tfr.GM.FCFOverEquity,\n\t    \t\tfr.GM.FCFPerShare,\n\t    \t\tfr.GM.earningsPerShare,\n\t    \t\tfr.GM.operatingIncomePerShare,\n\t    \t\tfr.GM.growthRate,\n\t    \t\tfr.GM.salesGrowthRate,\n\t    \t\tfr.GM.NOPATMargin,\n\t    \t\tfr.GM.beginningNetOperatingWCOverSales,\n\t    \t\tfr.GM.beginningNetOperatingLTAssetsOverSales,\n\t    \t\tfr.GM.beginningNetDebt2CapitalRatio,\n\t    \t\tfr.GM.afterTaxCostOfDebt,\n\t    \t];\n\n\t    var bodyGM = document.createElement(\"tbody\");\n\t    bodyGM.setAttribute(\"id\", \"tbodyGM\");\n\t    document.getElementById(\"tableGM\").appendChild(bodyGM);\n\t    var lastyear = lastYear(fr.CM.operatingCashFlow);\n\t\t\n\t\tvar col_1GM = document.getElementById(\"col_1GM\");\n\t\tcol_1GM.innerHTML = String(lastyear);\n\t\tvar col_2GM = document.getElementById(\"col_2GM\");\n\t\tcol_2GM.innerHTML = String(lastyear -1);\n\t\tvar col_3GM = document.getElementById(\"col_3GM\");\n\t\tcol_3GM.innerHTML = String(lastyear -2);\n\t\tvar col_4GM = document.getElementById(\"col_4GM\");\n\t\tcol_4GM.innerHTML = String(lastyear -3);\n\t\tvar col_5GM = document.getElementById(\"col_5GM\");\n\t\tcol_5GM.innerHTML = String(lastyear -4);\n\n\n\t    for (var j=0; j<itemNumbersGM.length; j++) {\n\t    \t\n\t    \tvar th = document.createElement(\"th\").appendChild(document.createTextNode(itemNameGM[j])); \n\t\t    var td = document.createElement(\"td\");\n\t\t    var tr = document.createElement(\"tr\");\n\t\t    td.appendChild(th);\n\t\t    tr.appendChild(td);\n\n\t\t    \n\t\t    \n\n\t\t    for (var i=0; i<5;i++) {\n\t\t    \tvar convertido;\n\t\t  \t\tvar itemPaint = itemNumbersGM[j][lastyear - i];\n\t\t  \t\tif ((typeof itemPaint) == 'number') {\n\t\t\t    \tconvertido = itemPaint.toLocaleString(undefined,{style: 'percent', minimumFractionDigits:2});\n\t\t\t    } else {\n\t\t\t    \tconvertido = numeral(Number(itemPaint)).format('0,0');\n\t\t\t    }\n\n\t\t\t    \n\n\t\t    \tvar thi = document.createElement(\"th\").appendChild(document.createTextNode(convertido));\n\t\t    \tvar tdi = document.createElement(\"td\");\n\t\t    \ttdi.id = itemNameGM[j] + i;\n\t\t    \ttdi.appendChild(thi);\n\t\t\t\ttr.appendChild(tdi);\n\t\t\t\t\n\t\t    }\n\t\t    document.getElementById(\"tbodyGM\").appendChild(tr);\n\t    }\n\t    \n\t    \n\t\t\n\n\t\t\n\t\t\t\t\n\n    });\n  });\n});\n\n"]}